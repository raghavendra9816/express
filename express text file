/* 
Hamle jaila ne copy data  haru matra change garchau
hamle handlemethod ma lekhako code  main index.js
server express ko server create garne ra ra handlemethod ko code paste garne

..................server create garni yesari...............
require("dotenv").config();
const express = require("express");
const indexRouter = require("./routes");

const app = express();
const PORT = process.env.PORT || 8000;

// Middleware For Parsing JSON Body
//I can pass req body as json
app.use(express.json());


// Run the application on the specified port
app.listen(PORT, () => {
  console.log(`The Application Is Running On Port: ${PORT}`);
});



................POST PUT PATCH DELETE MA PARAMS QUERY RA BODY MA backend bata data fetch huncha..........................
/client le send garcha data
app.post("/:id", (req, res) => {
  console.log({ query: req.query, params: req.params, body: req.body });
  res.json({ msg: "hello devlopers baddda" });
});

/client bata data send huncha i.e frontend bnata
app.put("/:id", (req, res) => {
  console.log({ query: req.query, params: req.params, body: req.body });
  res.json({ msg: "hello devlopers baddda" });
});

/client bata data ssend huncha
app.patch("/:id", (req, res) => {
  console.log({ query: req.query, params: req.params, body: req.body });
  res.json({ msg: "hello devlopers baddda" });
});

/NOte it down that put patch post method bata data send huncha i.e frontend bata pathacuha
app.delete("/", (req, res) => {
  res.json({ msg: "hello devlopers baddda" });
});

.............LOgin RA Register ko ............................

require("dotenv").config();
const express = require("express");
const app = express();
const PORT = Number(process.env.PORT);
app.use(express.json());

/register user
app.post("/register", (req, res) => {
  res.json({ msg: "register" });
});

/loginuser
app.post("/login", (req, res) => {
  const { email, password } = req.body;

  /LOGIC
  console.log({ email, password });
  res.json({ msg: "login" });
});

app.listen(PORT, () => {
  console.log(`app running on port ${PORT}`);
});


..............different method use garako.......................
/let students = [];

router.get("/", (req, res) => {
  res.json({ msg: "movies is wiorking" });
});

/ Create a student
router.post("/students", (req, res) => {
  const { name, age, location } = req.query;
  const id = students.length + 1; // Generate ID (you might want a more robust method)
  const newStudent = {
    id,
    name,
    age,
    location,
    status: "active",
    role: "student",
    password: "",
  };
  students.push(newStudent);
  console.log("Student added:", newStudent);
  res.json(newStudent);
});

/ Update a student by ID
router.put("/students/:id", (req, res) => {
  const { id } = req.params;
  const { name, age, location } = req.query;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }
  students[studentIndex] = { ...students[studentIndex], name, age, location };
  console.log("Student updated:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Patch a student by ID
router.patch("/students/:id", (req, res) => {
  const { id } = req.params;
  const updates = req.query;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }
  students[studentIndex] = { ...students[studentIndex], ...updates };
  console.log("Student patched:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Change the status of a student to inactive by ID
router.put("/students/inactive/:id", (req, res) => {
  const { id } = req.params;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }
  students[studentIndex].status = "inactive";
  console.log("Student status changed to inactive:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Change the role of a student by ID
router.put("/students/role/:id", (req, res) => {
  const { id } = req.params;
  const { role } = req.query;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }
  students[studentIndex].role = role;
  console.log("Student role changed:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Change the password of a student by ID
router.put("/students/password/:id", (req, res) => {
  const { id } = req.params;
  const { password } = req.query;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }
  students[studentIndex].password = password;
  console.log("Student password changed:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Forget the password of a student by ID
router.put("/students/forget-password/:id", (req, res) => {
  const { id } = req.params;
  const studentIndex = students.findIndex(
    (student) => student.id === parseInt(id)
  );
  if (studentIndex === -1) {
    res.status(404).json({ error: "Student not found" });
  }

  students[studentIndex].password = ""; // Forgetting the password by setting it to an empty string
  console.log("Student password forgotten:", students[studentIndex]);
  res.json(students[studentIndex]);
});

/ Get all students
router.get("/students", (req, res) => {
  res.json({ msg: "students" });
});

 */
